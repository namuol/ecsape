// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, Family, LinkedList, World, key, val, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  LinkedList = require('dll');

  Family = (function(_super) {
    __extends(Family, _super);

    function Family(components, world) {
      var next;
      this.components = components;
      Family.__super__.constructor.call(this);
      world.on('entityComponentsChanged', this._checkEntity.bind(this));
      world.on('entityAdded', this._checkEntity.bind(this));
      world.on('entityRemoved', this._onEntityRemoved.bind(this));
      next = world.entities.first;
      while (next != null) {
        this._checkEntity(next.obj);
        next = next.next;
      }
    }

    Family.prototype._onEntityRemoved = function(entity) {
      return this.remove(entity);
    };

    Family.prototype._checkEntity = function(entity) {
      if (entity._components.has(this.components)) {
        if (!this.contains(entity)) {
          this.add(entity);
          this.emit('added', entity);
        }
      } else {
        if (this.remove(entity)) {
          this.emit('removed', entity);
        }
      }
    };

    return Family;

  })(LinkedList);

  _ref = EventEmitter.prototype;
  for (key in _ref) {
    if (!__hasProp.call(_ref, key)) continue;
    val = _ref[key];
    if (Family.prototype[key] == null) {
      Family.prototype[key] = val;
    }
  }

  World = (function(_super) {
    __extends(World, _super);

    World._bm = require('bm')(1000);

    function World() {
      World.__super__.constructor.apply(this, arguments);
      this.entities = new LinkedList;
      this.systems = new LinkedList;
      this._families = {};
    }

    World.prototype.add = function(entity) {
      if (this.entities.contains(entity)) {
        return entity;
      }
      this.entities.add(entity);
      entity.on('componentAdded', this._onComponentsChanged.bind(this));
      entity.on('componentRemoved', this._onComponentsChanged.bind(this));
      this.emit('entityAdded', entity);
      return entity;
    };

    World.prototype.addSystem = function(system) {
      if (this.systems.contains(system)) {
        return system;
      }
      this.systems.add(system);
      if (typeof system.init === "function") {
        system.init(this);
      }
      return system;
    };

    World.prototype.invoke = function() {
      var args, name, next, _base;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      next = this.systems.first;
      while (next != null) {
        if (typeof (_base = next.obj)[name] === "function") {
          _base[name].apply(_base, args);
        }
        next = next.next;
      }
    };

    World.prototype._onComponentsChanged = function(entity) {
      return this.emit('entityComponentsChanged', entity);
    };

    World.prototype.remove = function(entity) {
      if (!this.entities.remove(entity)) {
        return false;
      }
      this.emit('entityRemoved', entity);
      return true;
    };

    World.prototype.get = function() {
      var mask, maskKey, requiredComponents, _ref1;
      requiredComponents = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      mask = World._bm.apply(World, requiredComponents);
      maskKey = mask.toString();
      return (_ref1 = this._families[maskKey]) != null ? _ref1 : (this._families[maskKey] = new Family(mask, this));
    };

    return World;

  })(EventEmitter);

  module.exports = World;

}).call(this);
