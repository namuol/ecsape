// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, Family, LinkedList, World, key, val, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  LinkedList = require('dll');

  Family = (function(_super) {
    __extends(Family, _super);

    function Family(components, world) {
      var entity, next;
      this.components = components;
      Family.__super__.constructor.call(this);
      world.on('__entitiesChanged', this._onEntitiesChanged.bind(this));
      world.on('__entitiesAdded', this._onEntitiesAdded.bind(this));
      world.on('__entitiesRemoved', this._onEntitiesRemoved.bind(this));
      next = world.entities.first;
      while (next != null) {
        entity = next.obj;
        if (entity._components.has(this.components)) {
          this.add(entity);
        }
        next = next.next;
      }
      return;
    }

    Family.prototype._onEntitiesAdded = function(entities) {
      var entitiesAdded, entity, next;
      entitiesAdded = new LinkedList;
      next = entities.first;
      while (next) {
        entity = next.obj;
        if (entity._components.has(this.components)) {
          this.add(entity);
          entitiesAdded.add(entity);
        }
        next = next.next;
      }
      if (entitiesAdded.length > 0) {
        this.emit('entitiesAdded', entitiesAdded);
      }
    };

    Family.prototype._onEntitiesRemoved = function(entities) {
      var entitiesRemoved, entity, next;
      entitiesRemoved = new LinkedList;
      next = entities.first;
      while (next) {
        entity = next.obj;
        if (!this.remove(entity)) {
          continue;
        }
        entitiesRemoved.add(entity);
        next = next.next;
      }
      if (entitiesRemoved.length > 0) {
        this.emit('entitiesRemoved', entitiesRemoved);
      }
    };

    Family.prototype._onEntitiesChanged = function(entities) {
      var added, entity, next, removed;
      added = new LinkedList;
      removed = new LinkedList;
      next = entities.first;
      while (next) {
        entity = next.obj;
        if (!this.contains(entity)) {
          if (entity._components.has(this.components)) {
            this.add(entity);
            added.add(entity);
          }
        } else {
          if (!entity._components.has(this.components)) {
            this.remove(entity);
            removed.add(entity);
          }
        }
        next = next.next;
      }
      if (added.length > 0) {
        this.emit('entitiesAdded', added);
      }
      if (removed.length > 0) {
        return this.emit('entitiesRemoved', removed);
      }
    };

    return Family;

  })(LinkedList);

  _ref = EventEmitter.prototype;
  for (key in _ref) {
    if (!__hasProp.call(_ref, key)) continue;
    val = _ref[key];
    if (Family.prototype[key] == null) {
      Family.prototype[key] = val;
    }
  }

  World = (function(_super) {
    __extends(World, _super);

    World._bm = require('bm')(1000);

    function World() {
      World.__super__.constructor.apply(this, arguments);
      this.entities = new LinkedList;
      this.systems = new LinkedList;
      this._families = {};
      this._onComponentsChanged = this._onComponentsChanged.bind(this);
      this.__added = new LinkedList;
      this.__removed = new LinkedList;
      this.__changed = new LinkedList;
    }

    World.prototype.add = function(entity) {
      if (this.entities.contains(entity)) {
        return entity;
      }
      this.__added.add(entity);
      return entity;
    };

    World.prototype.addAll = function(entities) {
      var entity, _i, _len;
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        this.__added.add(entity);
      }
    };

    World.prototype.remove = function(entity) {
      this.__removed.add(entity);
    };

    World.prototype.removeAll = function(entities) {
      var entity, _i, _len;
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        this.__removed.add(entity);
      }
      return entities;
    };

    World.prototype.flush = function() {
      var entity, next;
      if (this.__added.length > 0) {
        next = this.__added.first;
        while (next) {
          entity = next.obj;
          if (this.entities.contains(entity)) {
            continue;
          }
          this.entities.add(entity);
          entity.on('componentsAdded', this._onComponentsChanged);
          entity.on('componentsRemoved', this._onComponentsChanged);
          next = next.next;
        }
        this.emit('__entitiesAdded', this.__added);
        this.__added.clear();
      }
      if (this.__removed.length > 0) {
        next = this.__removed.first;
        while (next) {
          entity = next.obj;
          if (!this.entities.remove(entity)) {
            continue;
          }
          entity.removeListener('componentsAdded', this._onComponentsChanged);
          entity.removeListener('componentsRemoved', this._onComponentsChanged);
          next = next.next;
        }
        this.emit('__entitiesRemoved', this.__removed);
        this.__removed.clear();
      }
      if (this.__changed.length > 0) {
        this.emit('__entitiesChanged', this.__changed);
        return this.__changed.clear();
      }
    };

    World.prototype.addSystem = function(system) {
      if (this.systems.contains(system)) {
        return system;
      }
      this.systems.add(system);
      if (typeof system.init === "function") {
        system.init(this);
      }
      return system;
    };

    World.prototype.removeSystem = function(system) {
      if (!this.systems.remove(system)) {
        return;
      }
      return typeof system.deinit === "function" ? system.deinit(this) : void 0;
    };

    World.prototype.invoke = function() {
      var args, name, next, _base;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      next = this.systems.first;
      while (next != null) {
        if (typeof (_base = next.obj)[name] === "function") {
          _base[name].apply(_base, args);
        }
        next = next.next;
      }
    };

    World.prototype.get = function() {
      var mask, maskKey, _ref1;
      if (arguments.length === 0) {
        return void 0;
      }
      mask = World._bm.apply(World, arguments);
      maskKey = mask.toString();
      return (_ref1 = this._families[maskKey]) != null ? _ref1 : (this._families[maskKey] = new Family(mask, this));
    };

    World.prototype._onComponentsChanged = function(entity) {
      return this.__changed.add(entity);
    };

    return World;

  })(EventEmitter);

  module.exports = World;

}).call(this);
